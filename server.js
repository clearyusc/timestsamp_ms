 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

/* I'm adding this code! */
// TODO Update this later to just generically check, not using /api/:
app.use('/api/', (req,res,next) => {
        res.type('txt').send('API!');
    next();
    })

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })


function validateDate(type, date, res) {
  if (date.getTime() > 0) {
      res.type('txt').send("Valid "+type+"date: "+date.toString())
    } else {
      res.type('txt').send("Valid "+type+"date: "+date.toString())
    }
}

app.use(function(req, res, next){
  const dateString = req.url.toString().slice(1) // remove the '/' from the url
  
  // Check if it is a unix timestamp or a natural language date:
  if (isNaN(parseInt(dateString))) {
    // Natural Language Date
    
    const nlDate = new Date(decodeURI(dateString))
    validateDate("Natural Language Date",nlDate,res)
  } else {
    // Unix Timestamp
    
    const date = new Date(parseInt(dateString)*1000) // convert unix timestamp to date
    validateDate("Unix Date",date,res)
  }
  
  
  // Respond not found to all the wrong routes
  //res.status(404);
  //res.type('txt').send('Not found');
  next();
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

